(()=>{var e={};e.id=389,e.ids=[389],e.modules={846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6487:()=>{},7949:(e,t,s)=>{"use strict";s.r(t),s.d(t,{patchFetch:()=>h,routeModule:()=>d,serverHooks:()=>m,workAsyncStorage:()=>g,workUnitAsyncStorage:()=>y});var a={};s.r(a),s.d(a,{POST:()=>p,dynamic:()=>u});var r=s(6559),n=s(8088),o=s(7719),l=s(2190);class i{async processMonthlyBilling(e){try{let t;console.log(`Processing billing for user: ${e}`);let s=await this.getActiveSubscription(e),a=await this.getUserWallet(e);if(!s)throw Error("No active subscription found");let r=s.amount,n=a.balance;return console.log(`Subscription amount: $${r}, Wallet balance: $${n}`),n>=r?(console.log("Processing wallet-only payment"),t=await this.processWalletPayment(e,s.id,r)):n>0?(console.log("Processing hybrid payment (wallet + PayPal)"),t=await this.processHybridPayment(e,s.id,r,n)):(console.log("Processing PayPal-only payment"),t=await this.processPayPalPayment(e,s.id,r)),console.log("Transaction completed:",t),t}catch(t){return console.error("Billing processing failed:",t),{id:`txn_failed_${Date.now()}`,userId:e,subscriptionId:"unknown",amount:0,walletAmount:0,paypalAmount:0,status:"failed",paymentMethod:"wallet",transactionDate:new Date,description:`Billing failed: ${t.message}`}}}async processWalletPayment(e,t,s){return console.log(`Deducting $${s} from wallet for user ${e}`),this.mockWallet.balance-=s,{id:`txn_wallet_${Date.now()}`,userId:e,subscriptionId:t,amount:s,walletAmount:s,paypalAmount:0,status:"success",paymentMethod:"wallet",transactionDate:new Date,description:"Subscription payment via wallet"}}async processHybridPayment(e,t,s,a){let r=s-a;try{if(Math.random()>.1)return console.log(`PayPal charge successful: $${r}`),this.mockWallet.balance=0,{id:`txn_hybrid_${Date.now()}`,userId:e,subscriptionId:t,amount:s,walletAmount:a,paypalAmount:r,status:"success",paymentMethod:"wallet_paypal",transactionDate:new Date,description:`Subscription payment: $${a.toFixed(2)} wallet + $${r.toFixed(2)} PayPal`};throw Error("PayPal payment declined")}catch(a){return{id:`txn_hybrid_failed_${Date.now()}`,userId:e,subscriptionId:t,amount:s,walletAmount:0,paypalAmount:0,status:"failed",paymentMethod:"wallet_paypal",transactionDate:new Date,description:`Payment failed: ${a.message}`}}}async processPayPalPayment(e,t,s){try{if(Math.random()>.1)return console.log(`PayPal charge successful: $${s}`),{id:`txn_paypal_${Date.now()}`,userId:e,subscriptionId:t,amount:s,walletAmount:0,paypalAmount:s,status:"success",paymentMethod:"paypal",transactionDate:new Date,description:"Subscription payment via PayPal"};throw Error("PayPal payment declined")}catch(a){return{id:`txn_paypal_failed_${Date.now()}`,userId:e,subscriptionId:t,amount:s,walletAmount:0,paypalAmount:0,status:"failed",paymentMethod:"paypal",transactionDate:new Date,description:`PayPal payment failed: ${a.message}`}}}async getActiveSubscription(e){try{return console.log(`Fetching subscription for user: ${e}`),this.mockSubscription}catch(e){return console.error("Failed to get subscription, using mock data:",e),this.mockSubscription}}async getUserWallet(e){try{return console.log(`Fetching wallet for user: ${e}`),this.mockWallet}catch(e){return console.error("Failed to get wallet, using mock data:",e),this.mockWallet}}constructor(){this.mockWallet={id:"wallet_user_123",userId:"user_123",balance:25.5,currency:"USD",updatedAt:new Date},this.mockSubscription={id:"sub_user_123",userId:"user_123",planId:"plan_premium",status:"active",amount:29.99,currency:"USD",billingCycle:"monthly",nextBillingDate:new Date("2024-02-01"),paypalSubscriptionId:"I-BW452GLLEP1G",createdAt:new Date("2024-01-01"),updatedAt:new Date}}}class c{constructor(){this.billingService=new i}async processAllSubscriptions(){try{console.log("Starting monthly billing process...");let e=["user_123","user_456","user_789"];console.log("Users due for billing:",e);let t=[];for(let s of e)try{console.log(`Processing billing for user: ${s}`);let e=await this.billingService.processMonthlyBilling(s);t.push({userId:s,status:"success",transaction:e}),console.log(`Billing successful for user ${s}`)}catch(e){console.error(`Billing failed for user ${s}:`,e),t.push({userId:s,status:"failed",error:e.message})}return console.log("Monthly billing process completed:",t),t}catch(e){throw console.error("Billing cron job failed:",e),e}}}let u="force-dynamic";async function p(e){try{console.log("=== Starting Billing Process API ===");let e=new c,t=await e.processAllSubscriptions();return console.log("=== Billing Process Completed ==="),l.NextResponse.json({success:!0,message:"Billing process completed successfully",results:t,timestamp:new Date().toISOString(),totalProcessed:t.length,successful:t.filter(e=>"success"===e.status).length,failed:t.filter(e=>"failed"===e.status).length})}catch(e){return console.error("=== Billing Process Failed ===",e),l.NextResponse.json({success:!1,error:e.message,timestamp:new Date().toISOString()},{status:500})}}let d=new r.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/billing/process/route",pathname:"/api/billing/process",filename:"route",bundlePath:"app/api/billing/process/route"},resolvedPagePath:"/Users/sravanpolu/Projects/subscription-billing-logic/app/api/billing/process/route.ts",nextConfigOutput:"",userland:a}),{workAsyncStorage:g,workUnitAsyncStorage:y,serverHooks:m}=d;function h(){return(0,o.patchFetch)({workAsyncStorage:g,workUnitAsyncStorage:y})}},8335:()=>{},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")}};var t=require("../../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),a=t.X(0,[447,580],()=>s(7949));module.exports=a})();